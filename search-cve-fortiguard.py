# This Python script leverages the BeautifulSoup library to search for any given keywords on FortiGuard.
# The script is designed to provide an automated, efficient way to scour FortiGuard for relevant information based on your specified search terms.
# The script requires the BeautifulSoup library, a Python package for parsing HTML and XML documents.
# It's used for web scraping purposes to extract data from HTML, which is useful for web data extraction.
# Ensure that you have BeautifulSoup installed on your system. Use:
# pip install beautifulsoup4
# Update the variable values within the script to reflect your specific search requirements.
# The script will then use these keywords as the basis for the search operation on FortiGuard.

# bbuonassera June 2023

import requests
from bs4 import BeautifulSoup
import time


def get_search_results(cve_id):
    url = f"https://www.fortiguard.com/search?q={cve_id}"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    no_results = soup.find('p', text=lambda t: t and 'No Results' in t)
    if no_results:
        return f"No results found for {cve_id}"

    results = soup.find_all("div", class_="result_type")
    result_types = [result.span.text for result in results]

    return f"Results for {cve_id}: {', '.join(result_types)}"


# replace with your list of CVE IDs
cve_ids = [
    'CVE-2022-42004',
    'CVE-2022-42003',
    'CVE-2021-46877',
    'CVE-2021-20190',
    'CVE-2020-9548',
    'CVE-2020-9547',
    'CVE-2020-9546',
    'CVE-2020-8840',
    'CVE-2020-36518',
    'CVE-2020-36189',
    'CVE-2020-36188',
    'CVE-2020-36187',
    'CVE-2020-36186',
    'CVE-2020-36185',
    'CVE-2020-36184',
    'CVE-2020-36183',
    'CVE-2020-36182',
    'CVE-2020-36181',
    'CVE-2020-36180',
    'CVE-2020-36179',
    'CVE-2020-35728',
    'CVE-2020-35491',
    'CVE-2020-35490',
    'CVE-2020-25649',
    'CVE-2020-24750',
    'CVE-2020-24616',
    'CVE-2020-14195',
    'CVE-2020-14062',
    'CVE-2020-14061',
    'CVE-2020-14060',
    'CVE-2020-11620',
    'CVE-2020-11619',
    'CVE-2020-11113',
    'CVE-2020-11112',
    'CVE-2020-11111',
    'CVE-2020-10969',
    'CVE-2020-10968',
    'CVE-2020-10673',
    'CVE-2020-10672',
    'CVE-2020-10650',
    'CVE-2019-20330',
    'CVE-2019-17531',
    'CVE-2019-17267',
    'CVE-2019-16943',
    'CVE-2019-16942',
    'CVE-2019-16335',
    'CVE-2019-14893',
    'CVE-2019-14892',
    'CVE-2019-14540',
    'CVE-2019-14439',
    'CVE-2019-14379',
    'CVE-2019-12814',
    'CVE-2019-12384',
    'CVE-2019-12086',
    'CVE-2018-7489',
    'CVE-2018-5968',
    'CVE-2018-19362',
    'CVE-2018-19361',
    'CVE-2018-19360',
    'CVE-2018-14721',
    'CVE-2018-14720',
    'CVE-2018-14719',
    'CVE-2018-14718',
    'CVE-2018-12023',
    'CVE-2018-12022',
    'CVE-2018-11307',
    'CVE-2017-7525',
    'CVE-2017-17485',
    'CVE-2017-15095'
]

for cve_id in cve_ids:
    print(get_search_results(cve_id))
    time.sleep(1)