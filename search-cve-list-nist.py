# This Python script fetches and analyzes specific Common Vulnerabilities and Exposures(CVEs) data from the National Vulnerability Database(NVD).
# It constructs URLs for each CVE, sends GET requests to these URLs, and parses the JSON responses to extract information about the affected products.
# The results, along with any errors encountered during the process, are then written to an output file.
# The script also respects NVD's rate limit by pausing for 7 seconds after each request.
# This tool aids in identifying products affected by specific CVEs for vulnerability management and risk assessment.

# bbuonassera June 2023

import requests
import json
import time


# List of CVEs
cve_list = [
    "CVE-2022-42004", "CVE-2022-42003", "CVE-2021-20190", "CVE-2020-9548",
    "CVE-2020-9547", "CVE-2020-9546", "CVE-2020-8840", "CVE-2020-36518",
    "CVE-2020-36189", "CVE-2020-36188", "CVE-2020-36187", "CVE-2020-36186",
    "CVE-2020-36185", "CVE-2020-36184", "CVE-2020-36183", "CVE-2020-36182",
    "CVE-2020-36181", "CVE-2020-36180", "CVE-2020-36179", "CVE-2020-35491",
    "CVE-2020-35490", "CVE-2020-25649", "CVE-2020-24750", "CVE-2020-24616",
    "CVE-2020-14195", "CVE-2020-14062", "CVE-2020-14061", "CVE-2020-14060",
    "CVE-2020-11620", "CVE-2020-11619", "CVE-2020-11113", "CVE-2020-11112",
    "CVE-2020-11111", "CVE-2020-10969", "CVE-2020-10968", "CVE-2020-10673",
    "CVE-2020-10672", "CVE-2020-10650", "CVE-2019-20330", "CVE-2019-17531",
    "CVE-2019-17267", "CVE-2019-16943", "CVE-2019-16942", "CVE-2019-16335",
    "CVE-2019-14893", "CVE-2019-14892", "CVE-2019-14540", "CVE-2019-14439",
    "CVE-2019-14379", "CVE-2019-12814", "CVE-2019-12384"
]

# Base URL for NVD CVE JSON data
base_url = "https://services.nvd.nist.gov/rest/json/cve/1.0/"

# File to store the results
output_file = "cve_results.txt"

with open(output_file, "w") as f:
    for cve in cve_list:
        # Construct the URL for the CVE
        cve_url = base_url + cve
        # Make the HTTP request
        response = requests.get(cve_url)

        print(f"HTTP response status for {cve}: {response.status_code}")

        try:
            # Parse the JSON response
            data = json.loads(response.text)
            # Extract the list of affected products
            for node in data["result"]["CVE_Items"][0]["configurations"]["nodes"]:
                for cpe_match in node.get("cpe_match", []):
                    if cpe_match["vulnerable"]:
                        cpe_uri_parts = cpe_match["cpe23Uri"].split(":")
                        vendor = cpe_uri_parts[3]
                        product = cpe_uri_parts[4]
                        result = f"{cve} affects {vendor}/{product}\n"
                        print(result)
                        f.write(result)
        except json.JSONDecodeError:
            error_message = f"Failed to decode JSON for {cve}\n"
            print(error_message)
            f.write(error_message)
        except KeyError:
            error_message = f"No data available for {cve}\n"
            print(error_message)
            f.write(error_message)

        # Sleep for 7 seconds to respect the rate limit enforced by NIST
        time.sleep(7)
